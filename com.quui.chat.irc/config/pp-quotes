Care About Your Craft -- Why spend your life developing software unless you care about doing it well? (Hunt & Thomas, "The Pragmatic Programmer")
Provide Options, Don't Make Lame Excuses -- Instead of excuses, provide options. Don't say it can't be done; explain what can be done. (Hunt & Thomas, "The Pragmatic Programmer")
Be a Catalyst for Change -- You can't force change on people. Instead, show them how the future might be and help them participate in creating it. (Hunt & Thomas, "The Pragmatic Programmer")
Make Quality a Requirements Issue -- Involve your users in determining the project's real quality requirements. (Hunt & Thomas, "The Pragmatic Programmer")
Critically Analyze What You Read and Hear -- Don't be swayed by vendors, media hype, or dogma. Analyze information in terms of you and your project. (Hunt & Thomas, "The Pragmatic Programmer")
DRY --- Don't Repeat Yourself -- Every piece of knowledge must have a single, unambiguous, authoritative representation within a system. (Hunt & Thomas, "The Pragmatic Programmer")
Eliminate Effects Between Unrelated Things -- Design components that are self-contained, independent, and have a single, well-defined purpose. (Hunt & Thomas, "The Pragmatic Programmer")
Use Tracer Bullets to Find the Target -- Tracer bullets let you home in on your target by trying things and seeing how close they land. (Hunt & Thomas, "The Pragmatic Programmer")
Program Close to the Problem Domain -- Design and code in your user's language. (Hunt & Thomas, "The Pragmatic Programmer")
Iterate the Schedule with the Code -- Use experience you gain as you implement to refine the project time scales. (Hunt & Thomas, "The Pragmatic Programmer")
Use the Power of Command Shells -- Use the shell when graphical user interfaces don't cut it. (Hunt & Thomas, "The Pragmatic Programmer")
Always Use Source Code Control -- Source code control is a time machine for your work---you can go back. (Hunt & Thomas, "The Pragmatic Programmer")
Don't Panic When Debugging -- Take a deep breath and THINK ! about what could be causing the bug. (Hunt & Thomas, "The Pragmatic Programmer")
Don't Assume It---Prove It -- Prove your assumptions in the actual environment---with real data and boundary conditions. (Hunt & Thomas, "The Pragmatic Programmer")
Write Code That Writes Code -- Code generators increase your productivity and help avoid duplication. (Hunt & Thomas, "The Pragmatic Programmer")
Design with Contracts -- Use contracts to document and verify that code does no more and no less than it claims to do.  (Hunt & Thomas, "The Pragmatic Programmer")
Use Assertions to Prevent the Impossible -- Assertions validate your assumptions. Use them to protect your code from an uncertain world. (Hunt & Thomas, "The Pragmatic Programmer")
Finish What You Start -- Where possible, the routine or object that allocates a resource should be responsible for deallocating it. (Hunt & Thomas, "The Pragmatic Programmer")
Configure, Don't Integrate -- Implement technology choices for an application as configuration options, not through integration or engineering. (Hunt & Thomas, "The Pragmatic Programmer")
Analyze Workflow to Improve Concurrency -- Exploit concurrency in your user's workflow. (Hunt & Thomas, "The Pragmatic Programmer")
Always Design for Concurrency -- Allow for concurrency, and you'll design cleaner interfaces with fewer assumptions. (Hunt & Thomas, "The Pragmatic Programmer")
Use Blackboards to Coordinate Workflow -- Use blackboards to coordinate disparate facts and agents, while maintaining independence and isolation among participants. (Hunt & Thomas, "The Pragmatic Programmer")
Estimate the Order of Your Algorithms -- Get a feel for how long things are likely to take before you write code. (Hunt & Thomas, "The Pragmatic Programmer")
Refactor Early, Refactor Often -- Just as you might weed and rearrange a garden, rewrite, rework, and re-architect code when it needs it. Fix the root of the problem. (Hunt & Thomas, "The Pragmatic Programmer")
Test Your Software, or Your Users Will -- Test ruthlessly. Don't make your users find bugs for you. (Hunt & Thomas, "The Pragmatic Programmer")
Don't Gather Requirements---Dig for Them -- Requirements rarely lie on the surface. They're buried deep beneath layers of assumptions, misconceptions, and politics. (Hunt & Thomas, "The Pragmatic Programmer")
Abstractions Live Longer than Details -- Invest in the abstraction, not the implementation. Abstractions can survive the barrage of changes from different implementations and new technologies. (Hunt & Thomas, "The Pragmatic Programmer")
Don't Think Outside the Box--- Find the Box -- When faced with an impossible problem, identify the real constraints. Ask yourself: ``Does it have to be done this way? Does it have to be done at all?'' (Hunt & Thomas, "The Pragmatic Programmer")
Some Things Are Better Done than Described -- Don't fall into the specification spiral---at some point you need to start coding. (Hunt & Thomas, "The Pragmatic Programmer")
Costly Tools Don't Produce Better Designs -- Beware of vendor hype, industry dogma, and the aura of the price tag. Judge tools on their merits. (Hunt & Thomas, "The Pragmatic Programmer")
Don't Use Manual Procedures --  A shell script or batch file will execute the same instructions, in the same order, time after time.  (Hunt & Thomas, "The Pragmatic Programmer")
Coding Ain't Done 'Til All the Tests Run -- 'Nuff said. (Hunt & Thomas, "The Pragmatic Programmer")
Test State Coverage, Not Code Coverage -- Identify and test significant program states. Just testing lines of code isn't enough. (Hunt & Thomas, "The Pragmatic Programmer")
English is Just a Programming Language -- Write documents as you would write code: honor the DRY principle, use metadata, MVC, automatic generation, and so on. (Hunt & Thomas, "The Pragmatic Programmer")
Gently Exceed Your Users' Expectations -- Come to understand your users' expectations, then deliver just that little bit more. (Hunt & Thomas, "The Pragmatic Programmer")
Think! About Your Work -- Turn off the autopilot and take control. Constantly critique and appraise your work. (Hunt & Thomas, "The Pragmatic Programmer")
Don't Live with Broken Windows -- Fix bad designs, wrong decisions, and poor code when you see them. (Hunt & Thomas, "The Pragmatic Programmer")
Remember the Big Picture -- Don't get so engrossed in the details that you forget to check what's happening around you. (Hunt & Thomas, "The Pragmatic Programmer")
Invest Regularly in Your Knowledge Portfolio -- Make learning a habit. (Hunt & Thomas, "The Pragmatic Programmer")
It's Both What You Say and the Way You Say It -- There's no point in having great ideas if you don't communicate them effectively. (Hunt & Thomas, "The Pragmatic Programmer")
Make It Easy to Reuse -- If it's easy to reuse, people will. Create an environment that supports reuse. (Hunt & Thomas, "The Pragmatic Programmer")
There Are No Final Decisions -- No decision is cast in stone. Instead, consider each as being written in the sand at the beach, and plan for change. (Hunt & Thomas, "The Pragmatic Programmer")
Prototype to Learn -- Prototyping is a learning experience. Its value lies not in the code you produce, but in the lessons you learn. (Hunt & Thomas, "The Pragmatic Programmer")
Estimate to Avoid Surprises -- Estimate before you start. You'll spot potential problems up front. (Hunt & Thomas, "The Pragmatic Programmer")
Keep Knowledge in Plain Text -- Plain text won't become obsolete. It helps leverage your work and simplifies debugging and testing. (Hunt & Thomas, "The Pragmatic Programmer")
Use a Single Editor Well -- The editor should be an extension of your hand; make sure your editor is configurable, extensible, and programmable. (Hunt & Thomas, "The Pragmatic Programmer")
Fix the Problem, Not the Blame -- It doesn't really matter whether the bug is your fault or someone else's---it is still your problem, and it still needs to be fixed. (Hunt & Thomas, "The Pragmatic Programmer")
``select'' Isn't Broken -- It is rare to find a bug in the OS or the compiler, or even a third-party product or library. The bug is most likely in the application. (Hunt & Thomas, "The Pragmatic Programmer")
Learn a Text Manipulation Language -- You spend a large part of each day working with text. Why not have the computer do some of it for you? (Hunt & Thomas, "The Pragmatic Programmer")
You Can't Write Perfect Software -- Software can't be perfect. Protect your code and users from the inevitable errors. (Hunt & Thomas, "The Pragmatic Programmer")
Crash Early -- A dead program normally does a lot less damage than a crippled one. (Hunt & Thomas, "The Pragmatic Programmer")
Use Exceptions for Exceptional Problems -- Exceptions can suffer from all the readability and maintainability problems of classic spaghetti code. Reserve exceptions for exceptional things. (Hunt & Thomas, "The Pragmatic Programmer")
Minimize Coupling Between Modules -- Avoid coupling by writing ``shy'' code and applying the Law of Demeter. (Hunt & Thomas, "The Pragmatic Programmer")
Put Abstractions in Code, Details in Metadata -- Program for the general case, and put the specifics outside the compiled code base. (Hunt & Thomas, "The Pragmatic Programmer")
Design Using Services -- Design in terms of services ---independent, concurrent objects behind well-defined, consistent interfaces. (Hunt & Thomas, "The Pragmatic Programmer")
Separate Views from Models -- Gain flexibility at low cost by designing your application in terms of models and views. (Hunt & Thomas, "The Pragmatic Programmer")
Don't Program by Coincidence -- Rely only on reliable things. Beware of accidental complexity, and don't confuse a happy coincidence with a purposeful plan. (Hunt & Thomas, "The Pragmatic Programmer")
Test Your Estimates -- Mathematical analysis of algorithms doesn't tell you everything. Try timing your code in its target environment. (Hunt & Thomas, "The Pragmatic Programmer")
Design to Test -- Start thinking about testing before you write a line of code. (Hunt & Thomas, "The Pragmatic Programmer")
Don't Use Wizard Code You Don't Understand -- Wizards can generate reams of code. Make sure you understand all of it before you incorporate it into your project. (Hunt & Thomas, "The Pragmatic Programmer")
Work with a User to Think Like a User -- It's the best way to gain insight into how the system will really be used. (Hunt & Thomas, "The Pragmatic Programmer")
Use a Project Glossary -- Create and maintain a single source of all the specific terms and vocabulary for a project. (Hunt & Thomas, "The Pragmatic Programmer")
Start When You're Ready -- You've been building experience all your life. Don't ignore niggling doubts. (Hunt & Thomas, "The Pragmatic Programmer")
Don't Be a Slave to Formal Methods -- Don't blindly adopt any technique without putting it into the context of your development practices and capabilities. (Hunt & Thomas, "The Pragmatic Programmer")
Organize Teams Around Functionality -- Don't separate designers from coders, testers from data modelers. Build teams the way you build code. (Hunt & Thomas, "The Pragmatic Programmer")
Test Early. Test Often. Test Automatically. -- Tests that run with every build are much more effective than test plans that sit on a shelf. (Hunt & Thomas, "The Pragmatic Programmer")
Use Saboteurs to Test Your Testing -- Introduce bugs on purpose in a separate copy of the source to verify that testing will catch them. (Hunt & Thomas, "The Pragmatic Programmer")
Find Bugs Once -- Once a human tester finds a bug, it should be the last time a human tester finds that bug. Automatic tests should check for it from then on. (Hunt & Thomas, "The Pragmatic Programmer")
Build Documentation In, Don't Bolt It On -- Documentation created separately from code is less likely to be correct and up to date. (Hunt & Thomas, "The Pragmatic Programmer")
Sign Your Work -- Craftsmen of an earlier age were proud to sign their work. You should be, too. (Hunt & Thomas, "The Pragmatic Programmer")
"We, who trim mere rocks, must always imagine cathedrals" -- Credo of a chiseler. (Hunt & Thomas, "The Pragmatic Programmer")
"The greates fear is the fear of appearing weak" -- J.B. Bossuet, 1709. (Hunt & Thomas, "The Pragmatic Programmer")
"Striving to better, oft we mar what's well." -- Shakespeare, "King Lear", 1.4, 350. (Hunt & Thomas, "The Pragmatic Programmer")
"An investment in knowledge pays the best interest" -- Benjamin Franklin. (Hunt & Thomas, "The Pragmatic Programmer")
"It's better to be looked over than overlooked" -- Mae West, "Belle of the Nineties", 1934. (Hunt & Thomas, "The Pragmatic Programmer")
"Nothing is more dangerous than an idea, if it's the only one you have" -- Emil-Auguste Chartier, "Propos sur la religion", 1938. (Hunt & Thomas, "The Pragmatic Programmer")
"Ready, Fire, Aim..." -- Using tracer bullets. (Hunt & Thomas, "The Pragmatic Programmer")
"Die Grenzen meiner Sprache sind die Grenzen meiner Welt" -- Ludwig Wittgenstein. (Hunt & Thomas, "The Pragmatic Programmer")
"It's an excruciating concern to see your own problems and to know that yourself and noone else has caused them" -- Sophokles, "Ajax". (Hunt & Thomas, "The Pragmatic Programmer")
"The easiest person to decieve is one's own self. -- Edward Bulwer-Lytton. (Hunt & Thomas, "The Pragmatic Programmer")
"Nothing surprises as much as common sense and lucid action" -- Ralph Waldo Emerson. (Hunt & Thomas, "The Pragmatic Programmer")
"There is luxury in self reproach. When we blame ourselves, we feel no one else has a right to blame us." -- Oscar Wilde, "The Picture of Dorian Gray". (Hunt & Thomas, "The Pragmatic Programmer")
"Good fences, good neighbours" -- Robert Frost, "Mending Wall". (Hunt & Thomas, "The Pragmatic Programmer")
"No amount of genius can overcome a preoccupation with detail." -- Levy's third law. (Hunt & Thomas, "The Pragmatic Programmer")
"Still, a man hears what he wants to hear and disregards the rest" -- Simon and Garfunkel, "The boxer". (Hunt & Thomas, "The Pragmatic Programmer")
"Change and decay, wherever you glance..." -- H. F. Lyte, "Abide with me". (Hunt & Thomas, "The Pragmatic Programmer")
"Perfection is reached, not when there is no longer anything to add, but when there is no longer anything to take away." -- Antoine de Saint-Exupery, 1939. (Hunt & Thomas, "The Pragmatic Programmer")
"Who hesitates, is sometimes saved" -- James Thurber, "The Glass in the Filed". (Hunt & Thomas, "The Pragmatic Programmer")
Tests are the Programmer's Stone, transmuting fear into boredom. (Kent Beck, "TDD by Example")
Conservative mountain climbers have a rule that of your four hands and feet, three of them must be attached at any one time. [...] The pure form of TDD, wherein you are never more than one change away from a green bar, is like that [...] rule. (Kent Beck, "TDD by Example")
The goal is clean code that works. [...] First we'll solve the "that works" part of the problem. Then we'll solve the "clean code" part. This is the opposite of architecture-driven development, where you solve "clean code" first, then scramble around trying to integrate into the design the things you learn as you solve the "that works" problem. (Kent Beck, "TDD by Example")
Have fun!
Have fun!
Have fun!
Have fun!
Have fun!
Have fun!
Have fun!
Have fun!
Have fun!
Have fun!
Have fun!
Have fun!
Have fun!
Have fun!
Have fun!
Have fun!
Have fun!